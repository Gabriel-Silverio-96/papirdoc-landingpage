{"version":3,"sources":["assets/img/logo-papirDoc.svg","assets/img/banner/banner-main.png","assets/img/banner/banner-trabalhe-rapido.png","assets/img/banner/banner-modo-noturno.png","assets/img/banner/banner-implementacao.png","components/header/header.js","pages/index.js","components/callToAction/cta.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","logo","alt","Index","className","imgBanner","bannerPrimary","bannerSecond","bannerThird","Cta","href","target","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,2C,kBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,oD,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,kD,+NCW5BC,EANA,kBACX,gCACI,yBAAKC,IAAKC,IAAMC,IAAI,oB,gECqDbC,G,MAlDD,kBACV,yBAAKC,UAAU,aACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,WACX,qEACA,sEAGR,yBAAKA,UAAU,aAAaJ,IAAKK,IAAWH,IAAI,2BAEhD,yBAAKE,UAAU,UACX,yBAAKA,UAAU,YACX,kDACA,wIAKJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SAASJ,IAAKM,IAAeJ,IAAI,gCAIxD,yBAAKE,UAAU,yBACX,yBAAKA,UAAU,YACX,4CACA,6HAKJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SAASJ,IAAKO,IAAcL,IAAI,wBAIvD,yBAAKE,UAAU,UACX,yBAAKA,UAAU,YACX,mDACA,kIAIJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SAASJ,IAAKQ,IAAaN,IAAI,8BCvC/CO,G,MAZH,kBACR,yBAAKL,UAAU,OACX,yBAAKA,UAAU,WACX,yDACA,wDACA,uBAAGM,KAAK,4DAA4DC,OAAO,UACvE,4BAAQP,UAAU,mBAAlB,eCGDQ,G,MANA,kBACX,4BAAQR,UAAU,aACb,yBAAKJ,IAAKC,IAAMC,IAAI,qBCYdW,G,MAVH,kBACV,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHgBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8087016.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-papirDoc.86dcf052.svg\";","module.exports = __webpack_public_path__ + \"static/media/banner-main.5c9981ba.png\";","module.exports = __webpack_public_path__ + \"static/media/banner-trabalhe-rapido.b0df36d7.png\";","module.exports = __webpack_public_path__ + \"static/media/banner-modo-noturno.04d65ddb.png\";","module.exports = __webpack_public_path__ + \"static/media/banner-implementacao.225566c3.png\";","import React from 'react';\r\nimport './style.css';\r\n\r\nimport logo from '../../assets/img/logo-papirDoc.svg'\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <img src={logo} alt=\"Logo papirDoc\"></img>\r\n    </header>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport imgBanner from '../assets/img/banner/banner-main.png';\r\n\r\nimport bannerPrimary from '../assets/img/banner/banner-trabalhe-rapido.png';\r\nimport bannerSecond from '../assets/img/banner/banner-modo-noturno.png';\r\nimport bannerThird from '../assets/img/banner/banner-implementacao.png';\r\n\r\nimport './style.css'\r\n\r\nconst Index = () => (\r\n    <div className=\"container\">\r\n        <div className=\"banner-main\">\r\n            <div className=\"content\">\r\n                <h1>Hora de criar documentos incríveis</h1>\r\n                <p>O seu dia a dia muito mais organizado</p>\r\n            </div>\r\n        </div>\r\n        <img className=\"banner-img\" src={imgBanner} alt=\"Banner editor papirDoc\"></img>\r\n\r\n        <div className=\"column\">\r\n            <div className=\"text-col\">\r\n                <h2>Trabalhe rápido</h2>\r\n                <p>Com uma interface simples e intuitiva, e\r\n                com recursos necessários, realize seus\r\n                textos mais rápido\r\n                </p>\r\n            </div>\r\n            <div className=\"img-col\">\r\n                <img className=\"banner\" src={bannerPrimary} alt=\"Banner trabalhe rápido\"></img>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"column column-reverse\">\r\n            <div className=\"text-col\">\r\n                <h2>Modo noturno</h2>\r\n                <p>Proteja sua visão, tenha uma leitura e\r\n                escrita mais confortável, mantendo seu\r\n                bem estar\r\n                </p>\r\n            </div>\r\n            <div className=\"img-col\">\r\n                <img className=\"banner\" src={bannerSecond} alt=\"Banner modo turno\"></img>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"column\">\r\n            <div className=\"text-col\">\r\n                <h2>Implementação</h2>\r\n                <p>O papirDoc é uma solução free, visite o\r\n                repositório, e conheça mais sobre o projeto\r\n                </p>\r\n            </div>\r\n            <div className=\"img-col\">\r\n                <img className=\"banner\" src={bannerThird} alt=\"Banner implementacao\"></img>\r\n            </div>\r\n        </div>\r\n    </div>   \r\n)\r\n\r\nexport default Index;","import React from 'react'\r\nimport './style.css'\r\n\r\nconst Cta = () => (\r\n    <div className=\"cta\">\r\n        <div className=\"content\">\r\n            <h2>Repositório do projeto</h2>\r\n            <p>Conheça, baixe e edite</p>\r\n            <a href=\"https://github.com/Gabriel-Silverio-96/papirdoc-rich-text\" target=\"_blank\">\r\n                <button className=\"btn btn-primary\">GitHub</button>\r\n            </a>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Cta;","import React from 'react';\r\nimport logo from '../../assets/img/logo-papirDoc.svg'\r\n\r\nimport './style.css'\r\n\r\n\r\nconst Footer = () => (\r\n    <footer className=\"container\">\r\n         <img src={logo} alt=\"Logo papirDoc\"></img>         \r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nimport Header from './components/header/header';\r\nimport Index from './pages/index';\r\nimport Cta from './components/callToAction/cta'\r\nimport Footer from './components/footer/footer';\r\n\r\n\r\nimport './assets/css/main.css'\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Header />\r\n    <Index />\r\n    <Cta />\r\n    <Footer />\r\n  </div>\r\n)\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}